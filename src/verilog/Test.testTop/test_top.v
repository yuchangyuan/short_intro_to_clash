/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.6.3. DO NOT MODIFY.
*/
`timescale 100fs/100fs
module test_top
    ( // Inputs
      input  clk // clock
    , input  rst // reset
    , input [31:0] in_data

      // Outputs
    , output wire [31:0] out_data
    );
  reg [31:0] c$app_arg = 32'd0;
  // Test.hs:34:3-7
  wire signed [63:0] wild1;
  // Test.hs:34:3-7
  wire signed [63:0] c$wild1_app_arg;
  // Test.hs:34:3-7
  wire signed [63:0] wild1_0;
  // Test.hs:34:3-7
  wire signed [63:0] c$wild1_app_arg_0;
  wire [31:0] result_0;
  wire [191:0] c$app_arg_1;
  wire [5:0] c$case_scrut;
  wire [4:0] result_1;
  wire [36:0] result_2;
  wire [31:0] c$app_arg_2;
  // Test.hs:26:3-9
  wire signed [63:0] wild1_1;
  // Test.hs:26:3-9
  wire signed [63:0] c$wild1_app_arg_1;
  // Test.hs:26:3-9
  wire signed [63:0] wild1_2;
  // Test.hs:26:3-9
  wire signed [63:0] c$wild1_app_arg_2;
  reg [31:0] result = 32'd0;
  wire [4:0] c$i_2;
  wire [4:0] c$i_4;
  wire [159:0] c$app_arg_res;
  wire [31:0] c$vec2;
  wire [4:0] c$i_9;
  wire [4:0] c$i_11;

  // register begin
  always @(posedge clk or  posedge  rst) begin : c$app_arg_register
    if ( rst) begin
      c$app_arg <= 32'd0;
    end else begin
      c$app_arg <= result_2[36:5];
    end
  end
  // register end

  assign wild1 = $signed(c$wild1_app_arg);

  assign c$i_2 = (c$app_arg_0 - 5'd8);

  assign c$wild1_app_arg = $unsigned({{(64-5) {1'b0}},c$i_2});

  assign wild1_0 = $signed(c$wild1_app_arg_0);

  assign c$i_4 = (5'd8 - c$app_arg_0);

  assign c$wild1_app_arg_0 = $unsigned({{(64-5) {1'b0}},c$i_4});

  assign result_0 = (1'b0) ? (c$app_arg >> wild1) : (c$app_arg << wild1_0);

  // imap begin
  genvar i;
  generate
  for (i=0; i < 32; i = i + 1) begin : imap
    wire [5-1:0] map_index;
    wire [4:0] map_out;

    assign map_index = 5'd31 - i[0+:5];
    assign map_out = map_index;


    assign c$app_arg_res[i*5+:5] = map_out;
  end
  endgenerate
  // imap end

  assign c$vec2 = ((((in_data))));

  // zipWith start
  genvar i_0;
  generate
  for (i_0 = 0; i_0 < 32; i_0 = i_0 + 1) begin : zipWith
    wire [4:0] zipWith_in1;
    assign zipWith_in1 = c$app_arg_res[i_0*5+:5];
    wire  zipWith_in2;
    assign zipWith_in2 = c$vec2[i_0*1+:1];
    wire [5:0] c$n;
    assign c$n = {zipWith_in1,
                      ~ (((zipWith_in2)) == 1'b1)};


    assign c$app_arg_1[i_0*6+:6] = c$n;
  end
  endgenerate
  // zipWith end

  wire [191:0] vec;
  wire [5:0] acc_5_0;
  wire [5:0] acc_1;
  wire [5:0] acc_2;
  wire [5:0] acc_3;
  wire [5:0] acc_4;
  wire [5:0] acc_5;
  wire [5:0] acc_6;
  wire [5:0] acc_7;
  wire [5:0] acc_8;
  wire [5:0] acc_9;
  wire [5:0] acc_10;
  wire [5:0] acc_11;
  wire [5:0] acc_12;
  wire [5:0] acc_13;
  wire [5:0] acc_14;
  wire [5:0] acc_15;
  wire [5:0] acc_16;
  wire [5:0] acc_17;
  wire [5:0] acc_18;
  wire [5:0] acc_19;
  wire [5:0] acc_20;
  wire [5:0] acc_21;
  wire [5:0] acc_22;
  wire [5:0] acc_23;
  wire [5:0] acc_24;
  wire [5:0] acc_25;
  wire [5:0] acc_26;
  wire [5:0] acc_27;
  wire [5:0] acc_28;
  wire [5:0] acc_29;
  wire [5:0] acc_30;
  wire [5:0] acc_31;
  wire [5:0] acc_32;
  wire [5:0] acc_1_0;
  wire [5:0] acc_1_1;
  wire [5:0] acc_1_2;
  wire [5:0] acc_1_3;
  wire [5:0] acc_1_4;
  wire [5:0] acc_1_5;
  wire [5:0] acc_1_6;
  wire [5:0] acc_1_7;
  wire [5:0] acc_1_8;
  wire [5:0] acc_1_9;
  wire [5:0] acc_1_10;
  wire [5:0] acc_1_11;
  wire [5:0] acc_1_12;
  wire [5:0] acc_1_13;
  wire [5:0] acc_1_14;
  wire [5:0] acc_1_15;
  wire [5:0] acc_2_0;
  wire [5:0] acc_2_1;
  wire [5:0] acc_2_2;
  wire [5:0] acc_2_3;
  wire [5:0] acc_2_4;
  wire [5:0] acc_2_5;
  wire [5:0] acc_2_6;
  wire [5:0] acc_2_7;
  wire [5:0] acc_3_0;
  wire [5:0] acc_3_1;
  wire [5:0] acc_3_2;
  wire [5:0] acc_3_3;
  wire [5:0] acc_4_0;
  wire [5:0] acc_4_1;
  assign c$case_scrut = acc_5_0;

  assign vec = c$app_arg_1;

  assign acc_1 = vec[191:186];

  assign acc_2 = vec[185:180];

  assign acc_3 = vec[179:174];

  assign acc_4 = vec[173:168];

  assign acc_5 = vec[167:162];

  assign acc_6 = vec[161:156];

  assign acc_7 = vec[155:150];

  assign acc_8 = vec[149:144];

  assign acc_9 = vec[143:138];

  assign acc_10 = vec[137:132];

  assign acc_11 = vec[131:126];

  assign acc_12 = vec[125:120];

  assign acc_13 = vec[119:114];

  assign acc_14 = vec[113:108];

  assign acc_15 = vec[107:102];

  assign acc_16 = vec[101:96];

  assign acc_17 = vec[95:90];

  assign acc_18 = vec[89:84];

  assign acc_19 = vec[83:78];

  assign acc_20 = vec[77:72];

  assign acc_21 = vec[71:66];

  assign acc_22 = vec[65:60];

  assign acc_23 = vec[59:54];

  assign acc_24 = vec[53:48];

  assign acc_25 = vec[47:42];

  assign acc_26 = vec[41:36];

  assign acc_27 = vec[35:30];

  assign acc_28 = vec[29:24];

  assign acc_29 = vec[23:18];

  assign acc_30 = vec[17:12];

  assign acc_31 = vec[11:6];

  assign acc_32 = vec[5:0];

  // Test.hs:13:1-65
  wire [4:0] leftIdx;
  // Test.hs:13:1-65
  wire  leftAllZero;
  wire [5:0] c$case_alt;
  assign acc_1_0 = c$case_alt;

  assign leftIdx = acc_1[5:1];

  assign leftAllZero = acc_1[0:0];

  assign c$case_alt = leftAllZero ? acc_2 : {leftIdx,
                                                   1'b0};



  // Test.hs:13:1-65
  wire [4:0] leftIdx_1;
  // Test.hs:13:1-65
  wire  leftAllZero_1;
  wire [5:0] c$case_alt_3;
  assign acc_1_1 = c$case_alt_3;

  assign leftIdx_1 = acc_3[5:1];

  assign leftAllZero_1 = acc_3[0:0];

  assign c$case_alt_3 = leftAllZero_1 ? acc_4 : {leftIdx_1,
                                                       1'b0};



  // Test.hs:13:1-65
  wire [4:0] leftIdx_2;
  // Test.hs:13:1-65
  wire  leftAllZero_2;
  wire [5:0] c$case_alt_4;
  assign acc_1_2 = c$case_alt_4;

  assign leftIdx_2 = acc_5[5:1];

  assign leftAllZero_2 = acc_5[0:0];

  assign c$case_alt_4 = leftAllZero_2 ? acc_6 : {leftIdx_2,
                                                       1'b0};



  // Test.hs:13:1-65
  wire [4:0] leftIdx_3;
  // Test.hs:13:1-65
  wire  leftAllZero_3;
  wire [5:0] c$case_alt_5;
  assign acc_1_3 = c$case_alt_5;

  assign leftIdx_3 = acc_7[5:1];

  assign leftAllZero_3 = acc_7[0:0];

  assign c$case_alt_5 = leftAllZero_3 ? acc_8 : {leftIdx_3,
                                                       1'b0};



  // Test.hs:13:1-65
  wire [4:0] leftIdx_4;
  // Test.hs:13:1-65
  wire  leftAllZero_4;
  wire [5:0] c$case_alt_6;
  assign acc_1_4 = c$case_alt_6;

  assign leftIdx_4 = acc_9[5:1];

  assign leftAllZero_4 = acc_9[0:0];

  assign c$case_alt_6 = leftAllZero_4 ? acc_10 : {leftIdx_4,
                                                       1'b0};



  // Test.hs:13:1-65
  wire [4:0] leftIdx_5;
  // Test.hs:13:1-65
  wire  leftAllZero_5;
  wire [5:0] c$case_alt_7;
  assign acc_1_5 = c$case_alt_7;

  assign leftIdx_5 = acc_11[5:1];

  assign leftAllZero_5 = acc_11[0:0];

  assign c$case_alt_7 = leftAllZero_5 ? acc_12 : {leftIdx_5,
                                                       1'b0};



  // Test.hs:13:1-65
  wire [4:0] leftIdx_6;
  // Test.hs:13:1-65
  wire  leftAllZero_6;
  wire [5:0] c$case_alt_8;
  assign acc_1_6 = c$case_alt_8;

  assign leftIdx_6 = acc_13[5:1];

  assign leftAllZero_6 = acc_13[0:0];

  assign c$case_alt_8 = leftAllZero_6 ? acc_14 : {leftIdx_6,
                                                       1'b0};



  // Test.hs:13:1-65
  wire [4:0] leftIdx_7;
  // Test.hs:13:1-65
  wire  leftAllZero_7;
  wire [5:0] c$case_alt_9;
  assign acc_1_7 = c$case_alt_9;

  assign leftIdx_7 = acc_15[5:1];

  assign leftAllZero_7 = acc_15[0:0];

  assign c$case_alt_9 = leftAllZero_7 ? acc_16 : {leftIdx_7,
                                                       1'b0};



  // Test.hs:13:1-65
  wire [4:0] leftIdx_8;
  // Test.hs:13:1-65
  wire  leftAllZero_8;
  wire [5:0] c$case_alt_10;
  assign acc_1_8 = c$case_alt_10;

  assign leftIdx_8 = acc_17[5:1];

  assign leftAllZero_8 = acc_17[0:0];

  assign c$case_alt_10 = leftAllZero_8 ? acc_18 : {leftIdx_8,
                                                        1'b0};



  // Test.hs:13:1-65
  wire [4:0] leftIdx_9;
  // Test.hs:13:1-65
  wire  leftAllZero_9;
  wire [5:0] c$case_alt_11;
  assign acc_1_9 = c$case_alt_11;

  assign leftIdx_9 = acc_19[5:1];

  assign leftAllZero_9 = acc_19[0:0];

  assign c$case_alt_11 = leftAllZero_9 ? acc_20 : {leftIdx_9,
                                                        1'b0};



  // Test.hs:13:1-65
  wire [4:0] leftIdx_10;
  // Test.hs:13:1-65
  wire  leftAllZero_10;
  wire [5:0] c$case_alt_12;
  assign acc_1_10 = c$case_alt_12;

  assign leftIdx_10 = acc_21[5:1];

  assign leftAllZero_10 = acc_21[0:0];

  assign c$case_alt_12 = leftAllZero_10 ? acc_22 : {leftIdx_10,
                                                         1'b0};



  // Test.hs:13:1-65
  wire [4:0] leftIdx_11;
  // Test.hs:13:1-65
  wire  leftAllZero_11;
  wire [5:0] c$case_alt_13;
  assign acc_1_11 = c$case_alt_13;

  assign leftIdx_11 = acc_23[5:1];

  assign leftAllZero_11 = acc_23[0:0];

  assign c$case_alt_13 = leftAllZero_11 ? acc_24 : {leftIdx_11,
                                                         1'b0};



  // Test.hs:13:1-65
  wire [4:0] leftIdx_12;
  // Test.hs:13:1-65
  wire  leftAllZero_12;
  wire [5:0] c$case_alt_14;
  assign acc_1_12 = c$case_alt_14;

  assign leftIdx_12 = acc_25[5:1];

  assign leftAllZero_12 = acc_25[0:0];

  assign c$case_alt_14 = leftAllZero_12 ? acc_26 : {leftIdx_12,
                                                         1'b0};



  // Test.hs:13:1-65
  wire [4:0] leftIdx_13;
  // Test.hs:13:1-65
  wire  leftAllZero_13;
  wire [5:0] c$case_alt_15;
  assign acc_1_13 = c$case_alt_15;

  assign leftIdx_13 = acc_27[5:1];

  assign leftAllZero_13 = acc_27[0:0];

  assign c$case_alt_15 = leftAllZero_13 ? acc_28 : {leftIdx_13,
                                                         1'b0};



  // Test.hs:13:1-65
  wire [4:0] leftIdx_14;
  // Test.hs:13:1-65
  wire  leftAllZero_14;
  wire [5:0] c$case_alt_16;
  assign acc_1_14 = c$case_alt_16;

  assign leftIdx_14 = acc_29[5:1];

  assign leftAllZero_14 = acc_29[0:0];

  assign c$case_alt_16 = leftAllZero_14 ? acc_30 : {leftIdx_14,
                                                         1'b0};



  // Test.hs:13:1-65
  wire [4:0] leftIdx_15;
  // Test.hs:13:1-65
  wire  leftAllZero_15;
  wire [5:0] c$case_alt_17;
  assign acc_1_15 = c$case_alt_17;

  assign leftIdx_15 = acc_31[5:1];

  assign leftAllZero_15 = acc_31[0:0];

  assign c$case_alt_17 = leftAllZero_15 ? acc_32 : {leftIdx_15,
                                                         1'b0};



  // Test.hs:13:1-65
  wire [4:0] leftIdx_16;
  // Test.hs:13:1-65
  wire  leftAllZero_16;
  wire [5:0] c$case_alt_18;
  assign acc_2_0 = c$case_alt_18;

  assign leftIdx_16 = acc_1_0[5:1];

  assign leftAllZero_16 = acc_1_0[0:0];

  assign c$case_alt_18 = leftAllZero_16 ? acc_1_1 : {leftIdx_16,
                                                         1'b0};



  // Test.hs:13:1-65
  wire [4:0] leftIdx_17;
  // Test.hs:13:1-65
  wire  leftAllZero_17;
  wire [5:0] c$case_alt_19;
  assign acc_2_1 = c$case_alt_19;

  assign leftIdx_17 = acc_1_2[5:1];

  assign leftAllZero_17 = acc_1_2[0:0];

  assign c$case_alt_19 = leftAllZero_17 ? acc_1_3 : {leftIdx_17,
                                                         1'b0};



  // Test.hs:13:1-65
  wire [4:0] leftIdx_18;
  // Test.hs:13:1-65
  wire  leftAllZero_18;
  wire [5:0] c$case_alt_20;
  assign acc_2_2 = c$case_alt_20;

  assign leftIdx_18 = acc_1_4[5:1];

  assign leftAllZero_18 = acc_1_4[0:0];

  assign c$case_alt_20 = leftAllZero_18 ? acc_1_5 : {leftIdx_18,
                                                         1'b0};



  // Test.hs:13:1-65
  wire [4:0] leftIdx_19;
  // Test.hs:13:1-65
  wire  leftAllZero_19;
  wire [5:0] c$case_alt_21;
  assign acc_2_3 = c$case_alt_21;

  assign leftIdx_19 = acc_1_6[5:1];

  assign leftAllZero_19 = acc_1_6[0:0];

  assign c$case_alt_21 = leftAllZero_19 ? acc_1_7 : {leftIdx_19,
                                                         1'b0};



  // Test.hs:13:1-65
  wire [4:0] leftIdx_20;
  // Test.hs:13:1-65
  wire  leftAllZero_20;
  wire [5:0] c$case_alt_22;
  assign acc_2_4 = c$case_alt_22;

  assign leftIdx_20 = acc_1_8[5:1];

  assign leftAllZero_20 = acc_1_8[0:0];

  assign c$case_alt_22 = leftAllZero_20 ? acc_1_9 : {leftIdx_20,
                                                         1'b0};



  // Test.hs:13:1-65
  wire [4:0] leftIdx_21;
  // Test.hs:13:1-65
  wire  leftAllZero_21;
  wire [5:0] c$case_alt_23;
  assign acc_2_5 = c$case_alt_23;

  assign leftIdx_21 = acc_1_10[5:1];

  assign leftAllZero_21 = acc_1_10[0:0];

  assign c$case_alt_23 = leftAllZero_21 ? acc_1_11 : {leftIdx_21,
                                                         1'b0};



  // Test.hs:13:1-65
  wire [4:0] leftIdx_22;
  // Test.hs:13:1-65
  wire  leftAllZero_22;
  wire [5:0] c$case_alt_24;
  assign acc_2_6 = c$case_alt_24;

  assign leftIdx_22 = acc_1_12[5:1];

  assign leftAllZero_22 = acc_1_12[0:0];

  assign c$case_alt_24 = leftAllZero_22 ? acc_1_13 : {leftIdx_22,
                                                         1'b0};



  // Test.hs:13:1-65
  wire [4:0] leftIdx_23;
  // Test.hs:13:1-65
  wire  leftAllZero_23;
  wire [5:0] c$case_alt_25;
  assign acc_2_7 = c$case_alt_25;

  assign leftIdx_23 = acc_1_14[5:1];

  assign leftAllZero_23 = acc_1_14[0:0];

  assign c$case_alt_25 = leftAllZero_23 ? acc_1_15 : {leftIdx_23,
                                                         1'b0};



  // Test.hs:13:1-65
  wire [4:0] leftIdx_24;
  // Test.hs:13:1-65
  wire  leftAllZero_24;
  wire [5:0] c$case_alt_26;
  assign acc_3_0 = c$case_alt_26;

  assign leftIdx_24 = acc_2_0[5:1];

  assign leftAllZero_24 = acc_2_0[0:0];

  assign c$case_alt_26 = leftAllZero_24 ? acc_2_1 : {leftIdx_24,
                                                         1'b0};



  // Test.hs:13:1-65
  wire [4:0] leftIdx_25;
  // Test.hs:13:1-65
  wire  leftAllZero_25;
  wire [5:0] c$case_alt_27;
  assign acc_3_1 = c$case_alt_27;

  assign leftIdx_25 = acc_2_2[5:1];

  assign leftAllZero_25 = acc_2_2[0:0];

  assign c$case_alt_27 = leftAllZero_25 ? acc_2_3 : {leftIdx_25,
                                                         1'b0};



  // Test.hs:13:1-65
  wire [4:0] leftIdx_26;
  // Test.hs:13:1-65
  wire  leftAllZero_26;
  wire [5:0] c$case_alt_28;
  assign acc_3_2 = c$case_alt_28;

  assign leftIdx_26 = acc_2_4[5:1];

  assign leftAllZero_26 = acc_2_4[0:0];

  assign c$case_alt_28 = leftAllZero_26 ? acc_2_5 : {leftIdx_26,
                                                         1'b0};



  // Test.hs:13:1-65
  wire [4:0] leftIdx_27;
  // Test.hs:13:1-65
  wire  leftAllZero_27;
  wire [5:0] c$case_alt_29;
  assign acc_3_3 = c$case_alt_29;

  assign leftIdx_27 = acc_2_6[5:1];

  assign leftAllZero_27 = acc_2_6[0:0];

  assign c$case_alt_29 = leftAllZero_27 ? acc_2_7 : {leftIdx_27,
                                                         1'b0};



  // Test.hs:13:1-65
  wire [4:0] leftIdx_28;
  // Test.hs:13:1-65
  wire  leftAllZero_28;
  wire [5:0] c$case_alt_30;
  assign acc_4_0 = c$case_alt_30;

  assign leftIdx_28 = acc_3_0[5:1];

  assign leftAllZero_28 = acc_3_0[0:0];

  assign c$case_alt_30 = leftAllZero_28 ? acc_3_1 : {leftIdx_28,
                                                         1'b0};



  // Test.hs:13:1-65
  wire [4:0] leftIdx_29;
  // Test.hs:13:1-65
  wire  leftAllZero_29;
  wire [5:0] c$case_alt_31;
  assign acc_4_1 = c$case_alt_31;

  assign leftIdx_29 = acc_3_2[5:1];

  assign leftAllZero_29 = acc_3_2[0:0];

  assign c$case_alt_31 = leftAllZero_29 ? acc_3_3 : {leftIdx_29,
                                                         1'b0};



  // Test.hs:13:1-65
  wire [4:0] leftIdx_30;
  // Test.hs:13:1-65
  wire  leftAllZero_30;
  wire [5:0] c$case_alt_32;
  assign acc_5_0 = c$case_alt_32;

  assign leftIdx_30 = acc_4_0[5:1];

  assign leftAllZero_30 = acc_4_0[0:0];

  assign c$case_alt_32 = leftAllZero_30 ? acc_4_1 : {leftIdx_30,
                                                         1'b0};





  assign result_1 = c$case_scrut[5:1];

  assign result_2 = {c$app_arg_2,   result_1};

  assign c$app_arg_2 = (result_1 > 5'd8) ? (in_data << wild1_1) : (in_data >> wild1_2);

  assign wild1_1 = $signed(c$wild1_app_arg_1);

  assign c$i_9 = (result_1 - 5'd8);

  assign c$wild1_app_arg_1 = $unsigned({{(64-5) {1'b0}},c$i_9});

  assign wild1_2 = $signed(c$wild1_app_arg_2);

  assign c$i_11 = (5'd8 - result_1);

  assign c$wild1_app_arg_2 = $unsigned({{(64-5) {1'b0}},c$i_11});

  // register begin
  always @(posedge clk or  posedge  rst) begin : result_register
    if ( rst) begin
      result <= 32'd0;
    end else begin
      result <= result_0;
    end
  end
  // register end

  assign out_data = result;


endmodule

